function string_length(str):
  set {_len} to nativecall strlen {_str}
  return {_len}
function test(b: number):
  set {_c} to {_b}
  send "Looping" and {_c} and "times" to console
function json_test():
  send "hey to console" to console
  create json object as {_obj}
  put json value "Liz3" as "name" in {_obj}
  put json value 21 as "age" in {_obj}
  create json array as {_jsonList}
  loop 15 times:
    set {_a} to %loop-value% + 1
    send {_a} to console
    set {_b} to false
    if %loop-value% is 4:
      set {_b} to true
    send "its:" and {_b} to console
    set {_iter} to "Number: " + %loop-value%
    put json value {_iter} as %loop-value% in {_jsonList}
  put json value {_jsonList} as "a_list" in {_obj}
  put json value true as "bool_val" in {_obj}
  stringify json {_obj} to {_asStr}
  send {_asStr} to console
on load:
  set {a} to "hehe"
  set {a} to "21"
  set {_e} to string_length({a})
  set {_f_content} to nativecall readfile "test.py"
  set {_content_length} to string_length({_f_content})
  send {_f_content} to console
  send {_content_length} to console
  set {_write_result} to nativecall writefile "test2.py" "print( 123 )"
  send {_write_result} to console
on unload:
  send "We are done" to console
